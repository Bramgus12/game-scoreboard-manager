generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model boerenbridge_game {
  id                       String                @id @db.Uuid
  created_at               DateTime              @db.Timestamptz(6)
  updated_at               DateTime              @db.Timestamptz(6)
  current_round            Int
  points_per_correct_guess Int
  scoreboard_id            String                @db.Uuid
  scoreboard               scoreboard            @relation(fields: [scoreboard_id], references: [id], onDelete: NoAction, map: "boerenbridge_game_scoreboard_id_foreign")
  boerenbridge_player      boerenbridge_player[]
}

model boerenbridge_player {
  id                 String               @id @db.Uuid
  created_at         DateTime             @db.Timestamptz(6)
  updated_at         DateTime             @db.Timestamptz(6)
  name               String               @db.VarChar(255)
  game_id            String               @db.Uuid
  boerenbridge_game  boerenbridge_game    @relation(fields: [game_id], references: [id], onDelete: NoAction, map: "boerenbridge_player_game_id_foreign")
  boerenbridge_round boerenbridge_round[]
}

model boerenbridge_round {
  id                  String              @id @db.Uuid
  created_at          DateTime            @db.Timestamptz(6)
  updated_at          DateTime            @db.Timestamptz(6)
  round_number        Int
  guess               Int
  is_correct          Boolean
  player_id           String              @db.Uuid
  penalty_points      Int
  boerenbridge_player boerenbridge_player @relation(fields: [player_id], references: [id], onDelete: NoAction, map: "boerenbridge_round_player_id_foreign")
}

model klaverjas_round {
  id                String         @id @db.Uuid
  created_at        DateTime       @db.Timestamptz(6)
  updated_at        DateTime       @db.Timestamptz(6)
  round_number      Int
  points            Int
  fame              Int
  is_pit            Boolean
  is_wet            Boolean
  klaverjas_team_id String         @db.Uuid
  is_going          Boolean
  klaverjas_team    klaverjas_team @relation(fields: [klaverjas_team_id], references: [id], onDelete: NoAction, map: "klaverjas_round_klaverjas_team_id_foreign")
}

model klaverjas_team {
  id              String            @id @db.Uuid
  created_at      DateTime          @db.Timestamptz(6)
  updated_at      DateTime          @db.Timestamptz(6)
  type            team_type
  name            String            @db.VarChar(255)
  scoreboard_id   String            @db.Uuid
  klaverjas_round klaverjas_round[]
  scoreboard      scoreboard        @relation(fields: [scoreboard_id], references: [id], onDelete: NoAction, map: "klaverjas_team_scoreboard_id_foreign")
}

model scoreboard {
  id                String              @id @db.Uuid
  created_at        DateTime            @db.Timestamptz(6)
  updated_at        DateTime            @db.Timestamptz(6)
  scoreboard_name   String              @db.VarChar(255)
  user_id           String              @db.Uuid
  game_type         game_type
  boerenbridge_game boerenbridge_game[]
  klaverjas_team    klaverjas_team[]
  user              user                @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "scoreboard_user_id_foreign")
}

model user {
  id          String       @id @db.Uuid
  created_at  DateTime     @db.Timestamptz(6)
  updated_at  DateTime     @db.Timestamptz(6)
  external_id String       @db.VarChar(255)
  first_name  String       @db.VarChar(255)
  last_name   String       @db.VarChar(255)
  email       String       @db.VarChar(255)
  scoreboard  scoreboard[]
}

enum game_type {
  boerenbridge
  klaverjas
}

enum team_type {
  us
  them
}
